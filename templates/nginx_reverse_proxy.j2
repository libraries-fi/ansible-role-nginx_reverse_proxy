# {{ ansible_managed }}
{# Add local_test_enviroment top level domain to domain string in local testing. #}
{% macro add_local(domain) -%}
    {{domain}}{{local_test_environment|default('')}}
{%- endmacro %}

server {
{% for definition in nginx_listen %}
    listen {{definition}};
{% endfor %}

{% if nginx_reverse_proxy_ssl == True %}
    {% include 'kifi_ansible_roles/ajsalminen.nginx_common/templates/ssl.j2' %}
{% endif %}

    server_name {{ add_local(nginx_reverse_proxy_server_name) }}{% if nginx_reverse_proxy_www_name %} {{ add_local('www.' ~ nginx_reverse_proxy_server_name) }}{% endif %};

{% if nginx_reverse_proxy_alternate_site_names is defined %}
{% for name in nginx_reverse_proxy_alternate_site_names %}
    server_name {{ add_local(name) }}{% if nginx_reverse_proxy_www_name %} {{ add_local('www.' ~ name) }}{% endif %};
{% endfor %}
{% endif %}

{% if nginx_reverse_proxy_root == True %}
    root {{ nginx_reverse_proxy_root_path }};

    location ~ .(gif|jpg|jpeg|png|js|css|ico)$ {
        try_files $uri @proxy;
    }

    location ~ /files/styles/ {
        # expires 2h;
        try_files $uri @proxy;
    }
{% endif %}

{% if site_specific is defined %}
{{site_specific}}
{% endif %}

{% if nginx_reverse_proxy_upstream_host != 'localhost' %}
{% set nginx_reverse_proxy_upstream_host = add_local(nginx_reverse_proxy_upstream_host) %}
{% endif %}

# Everything that needs to pass without caching goes through this.
    location @proxy {
       proxy_set_header Host {{ nginx_reverse_proxy_upstream_header_host }};
{% include 'nginx_csp.j2' %}
{% for proxy_cache_option in nginx_reverse_proxy_cache_options %}
        {{ proxy_cache_option }}
{% endfor %}
        proxy_cache off;
        proxy_pass {{ nginx_reverse_proxy_pass }};
    }

{% for nginx_reverse_proxy_location_expression in nginx_reverse_proxy_location_expressions %}
    location {{ nginx_reverse_proxy_location_expression }} {
{% for condition in nginx_reverse_proxy_exclude_cache_conditions %}
    if ( {{ condition }} ) {
      return 405;
    }
    error_page 405 = @proxy;
{% endfor %}
{% if nginx_reverse_proxy_cookies is defined %}
{% for cookie in nginx_reverse_proxy_cookies %}
   if ({{ cookie.condition }}) {
      {{ cookie.setter }}
   }
{% endfor %}
{% endif %}
    proxy_set_header Host {{ nginx_reverse_proxy_upstream_header_host }};
{% include 'nginx_csp.j2' %}
    {% include 'proxy_cache_options.j2' %}

    proxy_pass {{ nginx_reverse_proxy_pass }};
    }
{% endfor %}
{% if nginx_reverse_proxy_deny_by_default %}
    location / {
    return 404;
    }
{% endif %}
}
